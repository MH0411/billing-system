/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eklinik_bill;

/**
 *
 * @author Amalina
 * @author Ho Zhen Hong
 */
import controller.SendEmail;
import controller.PDF;
import controller.Report;
import controller.Search;
import model.Month;
import model.ServerDetail;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import main.RMIConnector;

public class Billing extends javax.swing.JFrame {

    //Call library
    private RMIConnector rc = new RMIConnector();
    private ServerDetail sd = new ServerDetail();
    private String host = "";
    private int portNo;
    
    private DecimalFormat df = new DecimalFormat("0.00");
    private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
    private String txnDate = dateFormat.format(new Date());
    private String pmi_no;
    private String orderNo;
    private String strDate;
    private String strDate1;
    
    private String custId;
    private String billNo;
    private String itemCode;

    /**
     * Creates new form billing
     */
    public Billing(String hostname, int port) {
        initComponents();
        
        ServerDetail.setHost(hostname);
        ServerDetail.setPort(port);
        host = ServerDetail.getHost();
        portNo = ServerDetail.getPort();
        
        super.pack();
        super.setLocationRelativeTo(null);
        super.setVisible(true);
        
        jtf_mm_ItemCd.setEditable(false);
        jtf_mp_Code.setEditable(false);
        btnGroup.add(jrb_Unpaid);
        btnGroup.add(jrb_Paid);
        
        tableManageMiscellaneous();
        tableBillingParameter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        tab = new javax.swing.JTabbedPane();
        jPanel_Billing = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jt_BillDescription = new javax.swing.JTable();
        btn_GenerateBill = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jt_PatientInformation = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtf_SearchName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btn_SearchBilling = new javax.swing.JButton();
        jtf_SearchIC = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jtf_SearchID = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jPanel_ManageBill = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_ListPatientBill = new javax.swing.JTable();
        jtf_mb_SearchName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jrb_Paid = new javax.swing.JRadioButton();
        jrb_Unpaid = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jtf_mb_SearchIC = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jtf_mb_SearchID = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        btn_mb_SearchBill = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_ListItemPerPatient = new javax.swing.JTable();
        btn_AddItem = new javax.swing.JButton();
        btn_DeleteItem = new javax.swing.JButton();
        btn_Payment = new javax.swing.JButton();
        btn_PrintReceipt = new javax.swing.JButton();
        jPanel_ManageMiscellaneous = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_MM = new javax.swing.JTable();
        jtf_mm_SearchItem = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btn_RefreshMM = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jtf_mm_ItemDesc = new javax.swing.JTextField();
        jtf_mm_ItemCd = new javax.swing.JTextField();
        jtf_mm_BuyPrice = new javax.swing.JTextField();
        jtf_mm_SellPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_mm_Cancel = new javax.swing.JButton();
        btn_mm_Add = new javax.swing.JButton();
        btn_mm_Update = new javax.swing.JButton();
        btn_mm_Delete = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jt_BillingParameter = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jtf_mp_Code = new javax.swing.JTextField();
        jtf_mp_Name = new javax.swing.JTextField();
        jtf_mp_Type = new javax.swing.JTextField();
        jtf_mp_Value = new javax.swing.JTextField();
        jcb_Enable = new javax.swing.JCheckBox();
        btn_mp_Clear = new javax.swing.JButton();
        btn_mp_Add = new javax.swing.JButton();
        btn_mp_Update = new javax.swing.JButton();
        btn_mp_Delete = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        btn_BackupData = new javax.swing.JButton();
        btn_StartProcess = new javax.swing.JButton();
        btn_RetoreData = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        btn_YearlyStatement = new javax.swing.JButton();
        btn_Back = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        tab.setBackground(new java.awt.Color(255, 255, 255));
        tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabMousePressed(evt);
            }
        });

        jPanel_Billing.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Drug items"));
        jPanel4.setPreferredSize(new java.awt.Dimension(11, 422));

        jt_BillDescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction Date", "Item ", "Description", "Quantity", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_BillDescription.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jt_BillDescription);

        btn_GenerateBill.setText("Generate Bill");
        btn_GenerateBill.setEnabled(false);
        btn_GenerateBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_GenerateBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(516, 516, 516)
                        .addComponent(btn_GenerateBill, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_GenerateBill, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Information"));

        jt_PatientInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Episode Date", "Order No", "PMI No.", "IC No.", "Other ID", "Name", "Address", "Phone No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_PatientInformation.getTableHeader().setReorderingAllowed(false);
        jt_PatientInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_PatientInformationMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jt_PatientInformation);

        jLabel1.setText("Enter Patient Information to Search:");

        jtf_SearchName.setToolTipText("");
        jtf_SearchName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_SearchNameMousePressed(evt);
            }
        });

        jLabel6.setText("Name:");

        btn_SearchBilling.setText("Search");
        btn_SearchBilling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SearchBillingActionPerformed(evt);
            }
        });

        jtf_SearchIC.setToolTipText("");
        jtf_SearchIC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_SearchICMousePressed(evt);
            }
        });

        jLabel16.setText("IC Number:");

        jtf_SearchID.setToolTipText("");
        jtf_SearchID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_SearchIDMousePressed(evt);
            }
        });

        jLabel17.setText("Other ID:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jtf_SearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtf_SearchIC, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtf_SearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_SearchBilling, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_SearchBilling, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtf_SearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_SearchIC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_SearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel_BillingLayout = new javax.swing.GroupLayout(jPanel_Billing);
        jPanel_Billing.setLayout(jPanel_BillingLayout);
        jPanel_BillingLayout.setHorizontalGroup(
            jPanel_BillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_BillingLayout.createSequentialGroup()
                .addGroup(jPanel_BillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1185, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_BillingLayout.setVerticalGroup(
            jPanel_BillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_BillingLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tab.addTab("Billing", jPanel_Billing);

        jPanel_ManageBill.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("List of Bill"));

        jt_ListPatientBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill No", "Customer ID", "Name", "IC", "Other ID", "Address", "Phone No.", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_ListPatientBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_ListPatientBillMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt_ListPatientBill);

        jtf_mb_SearchName.setToolTipText("");
        jtf_mb_SearchName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_mb_SearchNameMousePressed(evt);
            }
        });

        jLabel8.setText("Enter Bill Information:");

        jrb_Paid.setBackground(new java.awt.Color(255, 255, 255));
        jrb_Paid.setText("Paid");
        jrb_Paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_PaidActionPerformed(evt);
            }
        });

        jrb_Unpaid.setBackground(new java.awt.Color(255, 255, 255));
        jrb_Unpaid.setSelected(true);
        jrb_Unpaid.setText("Unpaid");
        jrb_Unpaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrb_UnpaidActionPerformed(evt);
            }
        });

        jLabel15.setText("Name:");

        jtf_mb_SearchIC.setToolTipText("");
        jtf_mb_SearchIC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_mb_SearchICMousePressed(evt);
            }
        });

        jLabel18.setText("IC Number:");

        jtf_mb_SearchID.setToolTipText("");
        jtf_mb_SearchID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtf_mb_SearchIDMousePressed(evt);
            }
        });

        jLabel19.setText("Other ID:");

        jLabel20.setText("Status:");

        btn_mb_SearchBill.setText("Search");
        btn_mb_SearchBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mb_SearchBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(33, 1142, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1163, Short.MAX_VALUE)
                            .addComponent(jLabel8)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jtf_mb_SearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtf_mb_SearchIC, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtf_mb_SearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jrb_Unpaid)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrb_Paid)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_mb_SearchBill, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_mb_SearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtf_mb_SearchID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jrb_Unpaid)
                            .addComponent(jrb_Paid)
                            .addComponent(btn_mb_SearchBill, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_mb_SearchIC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jtf_mb_SearchName.getAccessibleContext().setAccessibleDescription("Example : Bill no, Customer ID");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("List Item of Bill"));

        jt_ListItemPerPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction Date", "Item Code", "Item Description", "Item Quantity", "Unit Price", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_ListItemPerPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jt_ListItemPerPatientMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jt_ListItemPerPatient);

        btn_AddItem.setText("Add Item");
        btn_AddItem.setEnabled(false);
        btn_AddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddItemActionPerformed(evt);
            }
        });

        btn_DeleteItem.setText("Delete Item");
        btn_DeleteItem.setEnabled(false);
        btn_DeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteItemActionPerformed(evt);
            }
        });

        btn_Payment.setText("Payment");
        btn_Payment.setEnabled(false);
        btn_Payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PaymentActionPerformed(evt);
            }
        });

        btn_PrintReceipt.setText("Print Receipt");
        btn_PrintReceipt.setEnabled(false);
        btn_PrintReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PrintReceiptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_AddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btn_DeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btn_Payment, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btn_PrintReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(291, 291, 291))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btn_AddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_DeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Payment, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_PrintReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel_ManageBillLayout = new javax.swing.GroupLayout(jPanel_ManageBill);
        jPanel_ManageBill.setLayout(jPanel_ManageBillLayout);
        jPanel_ManageBillLayout.setHorizontalGroup(
            jPanel_ManageBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel_ManageBillLayout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel_ManageBillLayout.setVerticalGroup(
            jPanel_ManageBillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ManageBillLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab.addTab("Manage Bill", jPanel_ManageBill);

        jPanel_ManageMiscellaneous.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Miscellaneous Items"));

        jt_MM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Description", "Buying Price", "Selling Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_MM.getTableHeader().setReorderingAllowed(false);
        jt_MM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_MMMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_MM);

        jtf_mm_SearchItem.setToolTipText("Example : Patient Name, IC No. Other ID");

        jLabel9.setText("Enter Item Information:");

        btn_RefreshMM.setText("Refresh");
        btn_RefreshMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RefreshMMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtf_mm_SearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_RefreshMM)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_mm_SearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_RefreshMM))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
        );

        jtf_mm_SearchItem.getAccessibleContext().setAccessibleDescription("Example : Item Code, Description, Price ");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Information"));

        jtf_mm_ItemCd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mm_ItemCdKeyTyped(evt);
            }
        });

        jtf_mm_BuyPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mm_BuyPriceKeyTyped(evt);
            }
        });

        jtf_mm_SellPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mm_SellPriceKeyTyped(evt);
            }
        });

        jLabel5.setText("Selling Price");

        jLabel4.setText("Buying Price");

        jLabel3.setText("Item Description");

        jLabel2.setText("Item Code");

        btn_mm_Cancel.setText("Clear");
        btn_mm_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_CancelActionPerformed(evt);
            }
        });

        btn_mm_Add.setText("Add");
        btn_mm_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_AddActionPerformed(evt);
            }
        });

        btn_mm_Update.setText("Update");
        btn_mm_Update.setEnabled(false);
        btn_mm_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_UpdateActionPerformed(evt);
            }
        });

        btn_mm_Delete.setText("Delete");
        btn_mm_Delete.setEnabled(false);
        btn_mm_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm_DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_mm_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mm_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mm_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mm_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jtf_mm_ItemDesc)
                        .addComponent(jtf_mm_BuyPrice)
                        .addComponent(jtf_mm_SellPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jtf_mm_ItemCd)))
                .addContainerGap(671, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_ItemCd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_ItemDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_BuyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mm_SellPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_mm_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mm_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mm_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mm_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel_ManageMiscellaneousLayout = new javax.swing.GroupLayout(jPanel_ManageMiscellaneous);
        jPanel_ManageMiscellaneous.setLayout(jPanel_ManageMiscellaneousLayout);
        jPanel_ManageMiscellaneousLayout.setHorizontalGroup(
            jPanel_ManageMiscellaneousLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel_ManageMiscellaneousLayout.setVerticalGroup(
            jPanel_ManageMiscellaneousLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ManageMiscellaneousLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        tab.addTab("Manage Miscellaneous", jPanel_ManageMiscellaneous);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Billing Parameter"));

        jt_BillingParameter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Value ", "Type", "Enable"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_BillingParameter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_BillingParameterMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jt_BillingParameter);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameter Information"));

        jLabel10.setText("Name");

        jLabel11.setText("Type");

        jLabel12.setText("Code");

        jLabel13.setText("Enable?");

        jLabel14.setText("Value");

        jtf_mp_Code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mp_CodeKeyTyped(evt);
            }
        });

        jtf_mp_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mp_NameKeyTyped(evt);
            }
        });

        jtf_mp_Type.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mp_TypeKeyTyped(evt);
            }
        });

        jtf_mp_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf_mp_ValueKeyTyped(evt);
            }
        });

        jcb_Enable.setBackground(new java.awt.Color(255, 255, 255));
        jcb_Enable.setText("Enable");

        btn_mp_Clear.setText("Clear");
        btn_mp_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mp_ClearActionPerformed(evt);
            }
        });

        btn_mp_Add.setText("Add");
        btn_mp_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mp_AddActionPerformed(evt);
            }
        });

        btn_mp_Update.setText("Update");
        btn_mp_Update.setEnabled(false);
        btn_mp_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mp_UpdateActionPerformed(evt);
            }
        });

        btn_mp_Delete.setText("Delete");
        btn_mp_Delete.setEnabled(false);
        btn_mp_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mp_DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btn_mp_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mp_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mp_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_mp_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jtf_mp_Code, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jcb_Enable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtf_mp_Type, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jtf_mp_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(jtf_mp_Name, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(683, 683, 683))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jtf_mp_Code, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mp_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mp_Type, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtf_mp_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_Enable, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_mp_Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mp_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mp_Update, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mp_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tab.addTab("Manage Parameter", jPanel3);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        btn_BackupData.setText("Backup Customer Data");
        btn_BackupData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackupDataActionPerformed(evt);
            }
        });

        btn_StartProcess.setText("Start Year End Processing");
        btn_StartProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StartProcessActionPerformed(evt);
            }
        });

        btn_RetoreData.setText("Restore Customer Data");
        btn_RetoreData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RetoreDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_BackupData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_StartProcess, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(btn_RetoreData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(897, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(btn_BackupData, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btn_StartProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btn_RetoreData, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(419, Short.MAX_VALUE))
        );

        tab.addTab("Year End Process", jPanel10);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        btn_YearlyStatement.setText("Customer Yearly Account Statement");
        btn_YearlyStatement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_YearlyStatementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(btn_YearlyStatement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(897, 897, 897))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(btn_YearlyStatement, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(568, Short.MAX_VALUE))
        );

        tab.addTab("Report", jPanel11);

        btn_Back.setText("Back to Main Menu");
        btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 36)); // NOI18N
        jLabel7.setText("Billing System");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(276, 276, 276)
                .addComponent(btn_Back, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addComponent(tab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1200, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Back, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Back to Main Menu
     * @param evt
     */
    private void btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btn_BackActionPerformed

    /**
     * Add new miscellaneous item
     * @param evt
     */
    private void btn_mm_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_AddActionPerformed
        // TODO add your handling code here:
        String itemCode = jtf_mm_ItemCd.getText();
        String itemDesc = jtf_mm_ItemDesc.getText();
        String buyPrice = jtf_mm_BuyPrice.getText();
        String sellPrice = jtf_mm_SellPrice.getText();

        if (itemCode.equals("")) {
            String infoMessage = "Please insert data in Item Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (itemDesc.equals("")) {
            String infoMessage = "Please insert data in Item Description text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (buyPrice.equals("")) {
            String infoMessage = "Please insert data in Buying price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (sellPrice.equals("")) {
            String infoMessage = "Please insert data in Selling Price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            try {
                String sql = "INSERT into far_miscellaneous_item (item_code, item_desc, buying_price, selling_price)"
                        + "VALUES ('"+ itemCode +"','"+ itemDesc +"','"+ buyPrice +"','"+ sellPrice +"')";

                rc.setQuerySQL(host, portNo, sql);
                String infoMessage = "Item added successfully.";
                JOptionPane.showMessageDialog(null, infoMessage, "Added", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh manage miscellaneous table
                tableManageMiscellaneous();
                
                jtf_mm_ItemDesc.setText("");
                jtf_mm_BuyPrice.setText("");
                jtf_mm_SellPrice.setText("");
                generateMiscItemCode();
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btn_mm_AddActionPerformed

    /**
     * Cancel modify process
     * @param evt
     */
    private void btn_mm_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_CancelActionPerformed
        // TODO add your handling code here:
        btn_mm_Add.setEnabled(true);
        btn_mm_Update.setEnabled(false);
        btn_mm_Delete.setEnabled(false);
        jtf_mm_ItemDesc.setText("");
        jtf_mm_BuyPrice.setText("");
        jtf_mm_SellPrice.setText("");
        generateMiscItemCode();
    }//GEN-LAST:event_btn_mm_CancelActionPerformed

    /**
     * Update the item details
     * @param evt
     */
    private void btn_mm_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_UpdateActionPerformed
        // TODO add your handling code here:
        btn_mm_Add.setEnabled(true);
        btn_mm_Update.setEnabled(false);
        btn_mm_Delete.setEnabled(false);
        String mm_ItemCode = jtf_mm_ItemCd.getText();
        String mm_ItemDesc = jtf_mm_ItemDesc.getText();
        String mm_BuyPrice = jtf_mm_BuyPrice.getText();
        String mm_SellPrice = jtf_mm_SellPrice.getText();

        if (mm_ItemCode.equals("")) {
            String infoMessage = "Please insert data in Item Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_ItemDesc.equals("")) {
            String infoMessage = "Please insert data in Item Description text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_BuyPrice.equals("")) {
            String infoMessage = "Please insert data in Buying price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_SellPrice.equals("")) {
            String infoMessage = "Please insert data in Selling Price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            try {
                String sql = "UPDATE far_miscellaneous_item "
                        + "SET item_desc = '"+ mm_ItemDesc +"', buying_price = '"+ mm_BuyPrice +"', selling_price = '"+ mm_SellPrice +"' "
                        + "WHERE item_code = '" + mm_ItemCode + "'";
                rc.setQuerySQL(host, portNo, sql);
                
                String infoMessage = "Selected item update successfully.";
                JOptionPane.showMessageDialog(null, infoMessage, "Updated", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh manage miscellaneous table
                tableManageMiscellaneous();
                
                jtf_mm_ItemDesc.setText("");
                jtf_mm_BuyPrice.setText("");
                jtf_mm_SellPrice.setText("");
                generateMiscItemCode();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btn_mm_UpdateActionPerformed

    /**
     * Send the select item details to text fields
     * @param evt
     */
    private void jt_MMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_MMMouseClicked
        // TODO add your handling code here:
        btn_mm_Add.setEnabled(false);
        btn_mm_Update.setEnabled(true);
        btn_mm_Delete.setEnabled(true);
        jtf_mm_ItemCd.setEditable(false);
        try {
            int row = jt_MM.getSelectedRow();
            row = jt_MM.convertRowIndexToModel(row);
            String mItemCode = (jt_MM.getModel().getValueAt(row, 0).toString());
            String sql = "SELECT * "
                    + "FROM far_miscellaneous_item "
                    + "WHERE item_code='" + mItemCode + "'";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);

            jtf_mm_ItemCd.setText(data.get(0).get(1));
            jtf_mm_ItemDesc.setText(data.get(0).get(2));
            jtf_mm_BuyPrice.setText(data.get(0).get(3));
            jtf_mm_SellPrice.setText(data.get(0).get(4));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_MMMouseClicked

    /**
     * Delete the selected item
     * @param evt
     */
    private void btn_mm_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm_DeleteActionPerformed
        // TODO add your handling code here:
        btn_mm_Add.setEnabled(true);
        btn_mm_Update.setEnabled(false);
        btn_mm_Delete.setEnabled(false);

        String mm_ItemCode = jtf_mm_ItemCd.getText();
        String mm_ItemDesc = jtf_mm_ItemDesc.getText();
        String mm_BuyPrice = jtf_mm_BuyPrice.getText();
        String mm_SellPrice = jtf_mm_SellPrice.getText();

        if (mm_ItemCode.equals("")) {
            String infoMessage = "Please insert data in Item Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_ItemDesc.equals("")) {
            String infoMessage = "Please insert data in Item Description text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_BuyPrice.equals("")) {
            String infoMessage = "Please insert data in Buying price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else if (mm_SellPrice.equals("")) {
            String infoMessage = "Please insert data in Selling Price text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            int response = JOptionPane.showConfirmDialog(null, "Do you sure to delete selected item?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
            } else if (response == JOptionPane.YES_OPTION) {
                try {
                    String sql = "DELETE FROM far_miscellaneous_item "
                            + "WHERE item_code='" + mm_ItemCode + "'";
                    rc.setQuerySQL(host, portNo, sql);

                    String infoMessage = "Selected item deleted successfully..";
                    JOptionPane.showMessageDialog(null, infoMessage, "Deleted", JOptionPane.INFORMATION_MESSAGE);

                    //Refresh miscellaneous item table
                    tableManageMiscellaneous();

                    jtf_mm_ItemDesc.setText("");
                    jtf_mm_BuyPrice.setText("");
                    jtf_mm_SellPrice.setText("");
                    generateMiscItemCode();
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else if (response == JOptionPane.CLOSED_OPTION) {
//                System.out.println("JOptionPane closed");
            }
        }
    }//GEN-LAST:event_btn_mm_DeleteActionPerformed

    /**
     * Display add bill item window
     * @param evt 
     */
    private void btn_AddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddItemActionPerformed
        // TODO add your handling code here:
        AddBillItem addBillItem = new AddBillItem();
        addBillItem.setCustId(custId);
        addBillItem.setBillNo(billNo);
        addBillItem.setVisible(true);
    }//GEN-LAST:event_btn_AddItemActionPerformed

    /**
     * Delete selected bill item
     * @param evt 
     */
    private void btn_DeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteItemActionPerformed
        // TODO add your handling code here:
        int rowIndex1 = -1;
        int rowIndex2 = -1;
        
        int response = JOptionPane.showConfirmDialog(null, "Do you sure to delete selected item?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.NO_OPTION) {
//            System.out.println("No button clicked");
        } else if (response == JOptionPane.YES_OPTION) {
//            System.out.println("Yes button clicked");
            try {
                rowIndex1 = jt_ListPatientBill.getSelectedRow();
                rowIndex1 = jt_ListPatientBill.convertRowIndexToModel(rowIndex1);
                rowIndex2 = jt_ListItemPerPatient.getSelectedRow();
                rowIndex2 = jt_ListItemPerPatient.convertRowIndexToModel(rowIndex2);

                billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex1, 0).toString();
                itemCode = jt_ListItemPerPatient.getModel().getValueAt(rowIndex2, 1).toString();
                String itemAmt = jt_ListItemPerPatient.getModel().getValueAt(rowIndex2, 5).toString();
                String qty = jt_ListItemPerPatient.getModel().getValueAt(rowIndex2, 3).toString();

                if ((rowIndex1 != -1 ) && (rowIndex2 != -1)){
                    //Delete from customer dtl
                    String sql1 = "DELETE FROM  far_customer_dtl "
                            + "WHERE bill_no = '"+ billNo +"'"
                            + "AND item_cd = '"+ itemCode +"' ";
                    rc.setQuerySQL(host, portNo, sql1);
                    
                    String month = new Month().getCreditMonth();
                    //Get current credit of customer
                    String sql2 = "SELECT "+ month +" "
                            + "FROM far_customer_ledger "
                            + "WHERE customer_id = '"+ custId +"' ";
                    ArrayList<ArrayList<String>> data1 = rc.getQuerySQL(host, portNo, sql2);
                    String currentCredit = data1.get(0).get(0);
                    
                    if (currentCredit == null){
                        currentCredit = "0";
                    }
                    
                    currentCredit = String.valueOf(Double.parseDouble(currentCredit) - Double.parseDouble(itemAmt));
                    
                    //Update customer ledger
                    String sql3 = "UPDATE far_customer_ledger "
                            + "SET "+ month +" = '"+ currentCredit +"' "
                            + "WHERE customer_id = '"+ custId +"' ";
                    rc.setQuerySQL(host, portNo, sql3);
                    
                    //Get current bill_amt and minus item price;
                    String sql4 = "SELECT item_amt, quantity "
                            + "FROM far_customer_hdr "
                            + "WHERE customer_id = '"+ custId +"' "
                            + "AND bill_no = '"+ billNo +"'";
                    ArrayList<ArrayList<String>> data2 = rc.getQuerySQL(host, portNo, sql4);
                    String itemAmt1 = data2.get(0).get(0);
                    String quantity = data2.get(0).get(1);
                    
                    itemAmt1 = String.valueOf(Double.parseDouble(itemAmt1) - Double.parseDouble(itemAmt));
                    quantity = String.valueOf(Integer.parseInt(quantity) - Integer.parseInt(qty));
                    
                    System.out.println(itemAmt);
                    System.out.println(itemAmt1);
                    System.out.println(billNo);
                    System.out.println(qty);
                    System.out.println(quantity);

                    //Update customer hdr
                    String sql5 = "UPDATE far_customer_hdr "
                            + "SET txn_date = '"+ txnDate +"', item_amt = '"+ itemAmt1 +"', quantity = '"+ quantity +"' "
                            + "WHERE bill_no = '"+ billNo +"' "
                            + "AND customer_id = '"+ custId +"'";
                    rc.setQuerySQL(host, portNo, sql5);
                    
                    System.out.println(sql5);
                    
                    String infoMessage = "Success delete data";
                    JOptionPane.showMessageDialog(null, infoMessage, "Success", JOptionPane.INFORMATION_MESSAGE);

                    //remove all row
                    DefaultTableModel model = (DefaultTableModel) jt_ListItemPerPatient.getModel();
                    int rowCount = model.getRowCount();
                    for (int i = rowCount - 1; i >= 0; i--) {
                        model.removeRow(i);
                    }

                    String sql6 = "SELECT item_cd, item_desc, quantity, item_amt, quantity* item_amt "
                         + "FROM far_customer_dtl "
                         + "WHERE bill_no = '"+ billNo +"'";
                    ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql6);

                    //add row and show value
                    for (int i = 0; i < data.size(); i++) {
                        model.addRow(new Object[]{"", "", "", "", ""});

                        jt_ListItemPerPatient.setValueAt(data.get(i).get(0), i, 0);
                        jt_ListItemPerPatient.setValueAt(data.get(i).get(1), i, 1);
                        jt_ListItemPerPatient.setValueAt(data.get(i).get(2), i, 2);
                        jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(3))), i, 3);
                        jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 4);
                    }
                    
                } else {
                    String infoMessage = "No item selected";
                    JOptionPane.showMessageDialog(null, infoMessage, "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (response == JOptionPane.CLOSED_OPTION) {
//            System.out.println("JOptionPane closed");
        }   
        
    }//GEN-LAST:event_btn_DeleteItemActionPerformed

    /**
     * Search patient information to bill description
     * @param evt
     */
    private void jt_PatientInformationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_PatientInformationMouseClicked
        // TODO add your handling code here:
        try {
            int rowIndex = -1;

            //Get no of row
            rowIndex = jt_PatientInformation.getSelectedRow();
            rowIndex = jt_PatientInformation.convertRowIndexToModel(rowIndex);
            //Assign row value to select
            pmi_no = jt_PatientInformation.getModel().getValueAt(rowIndex, 2).toString();
            orderNo = jt_PatientInformation.getModel().getValueAt(rowIndex, 1).toString();

            DateFormat dateFormat;
            dateFormat = new SimpleDateFormat("dd/MM/yyyy"); 
            Date date = new Date();
            String todayDate = dateFormat.format(date);

            String sql = "Select "
            + "pdm.dispensed_date, "
            + "pdd.DRUG_ITEM_CODE, "
            + "mdc.D_TRADE_NAME, "
            + "pdd.DISPENSED_QTY, "
            + "mdc.D_PRICE_PPACK, "
            + "(pdd.DISPENSED_QTY * mdc.D_PRICE_PPACK) AS TOTAL "
            + "FROM "
            + "pms_episode pe, "
            + "pis_order_master pom, "
            + "pis_dispense_detail pdd, "
            + "pis_mdc2 mdc, "
            + "pms_patient_biodata pb, "
            + "pis_dispense_master pdm "
            + "WHERE pe.PMI_NO = pom.PMI_NO "
            + "AND pom.ORDER_NO = pdd.ORDER_NO "
            + "AND pom.ORDER_NO = '"+ orderNo +"' "
            + "AND pdd.DRUG_ITEM_CODE = mdc.UD_MDC_CODE "
            + "AND pe.PMI_NO = pb.PMI_NO "
            + "AND DATE(date_format(str_to_date(pe.episode_date, '%d/%m/%Y'), '%Y-%m-%d')) = DATE(pdm.order_date) "
            + "AND pe.episode_date = '"+ todayDate +"' "
            + "GROUP BY pom.ORDER_NO, mdc.UD_MDC_CODE ";

            //Execute query
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);
            DefaultTableModel model = (DefaultTableModel) jt_BillDescription.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_BillDescription.setValueAt(data.get(i).get(0), i, 0);
                jt_BillDescription.setValueAt(data.get(i).get(1), i, 1);
                jt_BillDescription.setValueAt(data.get(i).get(2), i, 2);
                jt_BillDescription.setValueAt((int) Double.parseDouble((data.get(i).get(3))), i, 3);
                jt_BillDescription.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 4);
                jt_BillDescription.setValueAt(df.format(Double.parseDouble(data.get(i).get(5))), i, 5);
            }

            if (data.size() > 0) {
                btn_GenerateBill.setEnabled(true);
            }
            if (data.size() < 1) {
                btn_GenerateBill.setEnabled(false);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_PatientInformationMouseClicked

    /**
     * Generate bill details
     * @param evt
     */
    private void btn_GenerateBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_GenerateBillActionPerformed
        // TODO add your handling code here:
        Generate generate = new Generate(); //set new window
        generate.setPmiNo(pmi_no);
        generate.setOrderNo(orderNo);
        generate.billDetails();
        generate.setVisible(true);//set new window visible
        dispose(); // for hide current window
    }//GEN-LAST:event_btn_GenerateBillActionPerformed

    /**
     * Enable delete bill item button
     * @param evt 
     */
    private void jt_ListItemPerPatientMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_ListItemPerPatientMousePressed
        // TODO add your handling code here:
        if (jrb_Unpaid.isSelected()){
            btn_DeleteItem.setEnabled(true);
        }
    }//GEN-LAST:event_jt_ListItemPerPatientMousePressed

    /**
     * Display bill items in table list item per patient
     * @param evt 
     */
    private void jt_ListPatientBillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_ListPatientBillMouseClicked
        // TODO add your handling code here:
        btn_DeleteItem.setEnabled(false);
        
        if (jrb_Unpaid.isSelected()){
            btn_AddItem.setEnabled(true);
            btn_Payment.setEnabled(true);   
        } else if (jrb_Paid.isSelected()) {
            btn_PrintReceipt.setEnabled(true);
        }
        
        try {
            int rowIndex = -1;

            //Get no of row
            rowIndex = jt_ListPatientBill.getSelectedRow();
            rowIndex = jt_ListPatientBill.convertRowIndexToModel(rowIndex);
            
            billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex, 0).toString();
            custId = jt_ListPatientBill.getModel().getValueAt(rowIndex, 1).toString();
            
            String sql = "SELECT txn_date, item_cd, item_desc, quantity, item_amt/quantity, item_amt "
                    + "FROM far_customer_dtl "
                    + "WHERE bill_no = '"+ billNo +"' ";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);
            DefaultTableModel model = (DefaultTableModel) jt_ListItemPerPatient.getModel();
            
            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            
            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_ListItemPerPatient.setValueAt(data.get(i).get(0), i, 0);
                jt_ListItemPerPatient.setValueAt(data.get(i).get(1), i, 1);
                jt_ListItemPerPatient.setValueAt(data.get(i).get(2), i, 2);
                jt_ListItemPerPatient.setValueAt(data.get(i).get(3), i, 3);
                jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 4);
                jt_ListItemPerPatient.setValueAt(df.format(Double.parseDouble(data.get(i).get(5))), i, 5);
            }
            
        } catch (Exception e) {
             JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_ListPatientBillMouseClicked

    /**
     * Print selected bill
     * @param evt 
     */
    private void btn_PrintReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PrintReceiptActionPerformed
        // TODO add your handling code here: 
        try {
            //Get no of row
            int rowIndex = -1;
            rowIndex = jt_ListPatientBill.getSelectedRow();
            rowIndex = jt_ListPatientBill.convertRowIndexToModel(rowIndex);

            billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex, 0).toString();
            custId = jt_ListPatientBill.getModel().getValueAt(rowIndex, 1).toString();
            String grandTotal = jt_ListPatientBill.getModel().getValueAt(rowIndex, 8).toString();
            
            String sql = "SELECT item_cd, item_desc, item_amt "
                    + "FROM far_customer_dtl "
                    + "WHERE bill_no = '"+ billNo +"' "
                    + "AND customer_id = '"+ custId +"'";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);
            
            String gstAmount = "0.00";
            String serviceChargeAmount = "0.00";
            String discountAmount = "0.00";
            double subtotalBeforeTax = 0;
            double rounding = 0;
            double subtotal = 0;
            
            for (int i = 0 ; i < data.size() ; i++){
                if (data.get(i).get(0).contains("BP") == false){
                    subtotalBeforeTax += Double.parseDouble(data.get(i).get(2));
                } else {
                    if (data.get(i).get(1).equalsIgnoreCase("gst")){
                        gstAmount = data.get(i).get(2);
                    } else if (data.get(i).get(1).equalsIgnoreCase("service charge")){
                        serviceChargeAmount = data.get(i).get(2);
                    } else if (data.get(i).get(1).equalsIgnoreCase("discount")){
                        discountAmount = data.get(i).get(2);
                    }
                }
                subtotal += Double.parseDouble(data.get(i).get(2));
            }
            
            rounding = Double.parseDouble(grandTotal) - subtotal;
            
            PDF pdf = new PDF(custId,
                    billNo,
                    String.valueOf(df.format(subtotalBeforeTax)),
                    String.valueOf(grandTotal),
                    String.valueOf(gstAmount),
                    String.valueOf(serviceChargeAmount),
                    String.valueOf(discountAmount),
                    String.valueOf(df.format(rounding))
            );
            pdf.printPaidBill();
            Desktop.getDesktop().open(new File("Receipt.pdf"));
            
            SendEmail sendEmail = new SendEmail(custId,
                    billNo,
                    String.valueOf(df.format(subtotalBeforeTax)),
                    String.valueOf(grandTotal),
                    String.valueOf(gstAmount),
                    String.valueOf(serviceChargeAmount),
                    String.valueOf(discountAmount),
                    String.valueOf(df.format(rounding))
            );
            sendEmail.send();
            
        } catch (Exception ex) {
            Logger.getLogger(Billing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_PrintReceiptActionPerformed

    /**
     * Show paid bill
     * @param evt 
     */
    private void jrb_PaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_PaidActionPerformed
        // TODO add your handling code here:
        btn_Payment.setEnabled(false);
        btn_AddItem.setEnabled(false);
        btn_DeleteItem.setEnabled(false);
    }//GEN-LAST:event_jrb_PaidActionPerformed

    /**
     * Show unpaid bill
     * @param evt 
     */
    private void jrb_UnpaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrb_UnpaidActionPerformed
        // TODO add your handling code here:
        btn_PrintReceipt.setEnabled(false);
    }//GEN-LAST:event_jrb_UnpaidActionPerformed

    /**
     * Go to payment
     */
    private void btn_PaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PaymentActionPerformed
        // TODO add your handling code here:
        //Get no of row
        int rowIndex = -1;
        rowIndex = jt_ListPatientBill.getSelectedRow();
        rowIndex = jt_ListPatientBill.convertRowIndexToModel(rowIndex);

        billNo = jt_ListPatientBill.getModel().getValueAt(rowIndex, 0).toString();
        custId = jt_ListPatientBill.getModel().getValueAt(rowIndex, 1).toString();
        
        Payment payment = new Payment();
        payment.setCustId(custId);
        payment.setBillNo(billNo);
        payment.displayBillDetail();
        payment.setVisible(true);
    }//GEN-LAST:event_btn_PaymentActionPerformed

    /**
     * Set input char limit
     * @param evt 
     */
    private void jtf_mm_ItemCdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mm_ItemCdKeyTyped
        // TODO add your handling code here:
        if(jtf_mm_ItemCd.getText().length() > 6){
            evt.consume();
        }
    }//GEN-LAST:event_jtf_mm_ItemCdKeyTyped

    /**
     * Set input char limit and digit only
     * @param evt 
     */
    private void jtf_mm_BuyPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mm_BuyPriceKeyTyped
        // TODO add your handling code here:
        if(jtf_mm_ItemCd.getText().length() > 6){
            evt.consume();
        }
        
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_PERIOD
                || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_jtf_mm_BuyPriceKeyTyped

    /**
     * Set input char and digit only
     * @param evt 
     */
    private void jtf_mm_SellPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mm_SellPriceKeyTyped
        // TODO add your handling code here:
        if(jtf_mm_ItemCd.getText().length() > 6){
            evt.consume();
        }
        
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_PERIOD
                || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_jtf_mm_SellPriceKeyTyped

    /**
     * Reload table miscellaneous items
     * @param evt 
     */
    private void btn_RefreshMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RefreshMMActionPerformed
        // TODO add your handling code here:
        tableManageMiscellaneous();
    }//GEN-LAST:event_btn_RefreshMMActionPerformed

    /**
     * Reload all table when tab click
     * @param evt 
     */
    private void tabMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabMousePressed
        // TODO add your handling code here:
        tableManageMiscellaneous();
    }//GEN-LAST:event_tabMousePressed

    /**
     * Clear text fields in manage parameter tab
     * @param evt 
     */
    private void btn_mp_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mp_ClearActionPerformed
        // TODO add your handling code here:
        btn_mp_Add.setEnabled(true);
        btn_mp_Update.setEnabled(false);
        btn_mp_Delete.setEnabled(false);
        jtf_mp_Name.setText("");
        jtf_mp_Value.setText("");
        jtf_mp_Type.setText("");
        
        generateParamCode();
    }//GEN-LAST:event_btn_mp_ClearActionPerformed

    /**
     * Add new billing parameter
     * @param evt 
     */
    private void btn_mp_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mp_AddActionPerformed
        // TODO add your handling code here:
        String paramCode = jtf_mp_Code.getText();
        String paramName = jtf_mp_Name.getText();
        String paramType = jtf_mp_Type.getText();
        String paramValue  = jtf_mp_Value.getText();
        String enable = "no";
        if (jcb_Enable.isSelected())
            enable = "yes";
        else 
            enable = "no";
        
        if (paramCode.equals("")){
            String infoMessage = "Please insert data in Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
            
        } else  if (paramName.equals("")){
            String infoMessage = "Please insert data in Name text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (paramType.equals("")){
            String infoMessage = "Please insert data in Type text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (paramValue.equals("")){
            String infoMessage = "Please insert data in Value text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                String sql = "INSERT INTO far_billing_parameter(param_code, param_name, param_type, param_value, enable) "
                        + "VALUES('"+ paramCode +"', '"+ paramName +"', '"+ paramType +"', '"+ paramValue +"', '"+ enable +"')";
                rc.setQuerySQL(host, portNo, sql);

                String infoMessage = "Item added successfully.";
                JOptionPane.showMessageDialog(null, infoMessage, "Added", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh miscellaneous item table
                tableBillingParameter();

                jtf_mp_Code.setText("");
                jtf_mp_Name.setText("");
                jtf_mp_Type.setText("");
                jtf_mp_Value.setText("");
                jcb_Enable.setSelected(false);

                generateParamCode();
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btn_mp_AddActionPerformed

    /**
     * Update billing parameter
     * @param evt 
     */
    private void btn_mp_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mp_UpdateActionPerformed
        // TODO add your handling code here:
        String paramCode = jtf_mp_Code.getText();
        String paramName = jtf_mp_Name.getText();
        String paramType = jtf_mp_Type.getText();
        String paramValue  = jtf_mp_Value.getText();
        String enable = "no";
        if (jcb_Enable.isSelected())
            enable = "yes";
        else 
            enable = "no";
        
        if (paramCode.equals("")){
            String infoMessage = "Please insert data in Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
            
        } else  if (paramName.equals("")){
            String infoMessage = "Please insert data in Name text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (paramType.equals("")){
            String infoMessage = "Please insert data in Type text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (paramValue.equals("")){
            String infoMessage = "Please insert data in Value text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                String sql = "UPDATE far_billing_parameter "
                        + "SET param_code = '"+ paramCode +"', param_name = '"+ paramName +"', param_type = '"+ paramType +"', param_value = '"+ paramValue +"', enable = '"+ enable +"' "
                        + "WHERE param_code = '"+ paramCode +"'";
                rc.setQuerySQL(host, portNo, sql);

                String infoMessage = "Selected item updated successfully.";
                JOptionPane.showMessageDialog(null, infoMessage, "Updated", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh miscellaneous item table
                tableBillingParameter();

                jtf_mp_Name.setText("");
                jtf_mp_Type.setText("");
                jtf_mp_Value.setText("");
                jcb_Enable.setSelected(false);
                generateParamCode();
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_btn_mp_UpdateActionPerformed

    /**
     * Delete selected billing parameter
     * @param evt 
     */
    private void btn_mp_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mp_DeleteActionPerformed
        // TODO add your handling code here:
        String paramCode = jtf_mp_Code.getText();
        if (paramCode.equals("")){
            String infoMessage = "Please insert data in Code text field.";
            JOptionPane.showMessageDialog(null, infoMessage, "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int response = JOptionPane.showConfirmDialog(null, "Do you sure to delete selected item?", "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.NO_OPTION) {
            } else if (response == JOptionPane.YES_OPTION) {

                try {
                    String sql = "DELETE FROM far_billing_parameter "
                            + "WHERE param_code = '"+ paramCode +"'";
                    rc.setQuerySQL(host, portNo, sql);

                    String infoMessage = "Selected item deleted successfully.";
                    JOptionPane.showMessageDialog(null, infoMessage, "Added", JOptionPane.INFORMATION_MESSAGE);

                    //Refresh miscellaneous item table
                    tableBillingParameter();

                    jtf_mp_Name.setText("");
                    jtf_mp_Type.setText("");
                    jtf_mp_Value.setText("");
                    jcb_Enable.setSelected(false);
                    generateParamCode();

                } catch (Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
            }    
        }
    }//GEN-LAST:event_btn_mp_DeleteActionPerformed

    /**
     * Set billing parameter to text fields 
     * @param evt 
     */
    private void jt_BillingParameterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_BillingParameterMouseClicked
        // TODO add your handling code here:
        btn_mp_Add.setEnabled(false);
        btn_mp_Update.setEnabled(true);
        btn_mp_Delete.setEnabled(true);
        jtf_mp_Code.setEditable(false);
        
        try {
            int row = jt_BillingParameter.getSelectedRow();
            row = jt_BillingParameter.convertRowIndexToModel(row);
            String paramCode = (jt_BillingParameter.getModel().getValueAt(row, 0).toString());
            String sql = "SELECT * "
                    + "FROM far_billing_parameter "
                    + "WHERE param_code='" + paramCode + "'";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);

            jtf_mp_Code.setText(data.get(0).get(0));
            jtf_mp_Name.setText(data.get(0).get(1));
            jtf_mp_Value.setText(data.get(0).get(2));
            jtf_mp_Type.setText(data.get(0).get(3));
            
            if (data.get(0).get(5).equalsIgnoreCase("Yes"))
                jcb_Enable.setSelected(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jt_BillingParameterMouseClicked

    /**
     * Set input char limit
     * @param evt 
     */
    private void jtf_mp_CodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mp_CodeKeyTyped
        // TODO add your handling code here:
        if (jtf_mp_Code.getText().length() >4)
            evt.consume();
    }//GEN-LAST:event_jtf_mp_CodeKeyTyped

    /**
     * Set input char limit
     * @param evt 
     */
    private void jtf_mp_NameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mp_NameKeyTyped
        // TODO add your handling code here:
        if (jtf_mp_Name.getText().length() > 20)
            evt.consume();
    }//GEN-LAST:event_jtf_mp_NameKeyTyped

    /**
     * Set input char limit
     * @param evt 
     */
    private void jtf_mp_TypeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mp_TypeKeyTyped
        // TODO add your handling code here:
        if (jtf_mp_Type.getText().length() > 10)
            evt.consume();
    }//GEN-LAST:event_jtf_mp_TypeKeyTyped

    /**
     * Set input value limit
     * @param evt 
     */
    private void jtf_mp_ValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_mp_ValueKeyTyped
        // TODO add your handling code here:
        if(jtf_mp_Value.getText().length() > 4){
            evt.consume();
        }
        
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_PERIOD
                || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_jtf_mp_ValueKeyTyped

    private void btn_SearchBillingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SearchBillingActionPerformed
        // TODO add your handling code here:
        Search search = new Search();
        ArrayList<ArrayList<String>> data = null;
        
        String name = jtf_SearchName.getText();
        String ic = jtf_SearchIC.getText();
        String id = jtf_SearchID.getText();
        
        System.out.println(name + ic + id);
        if (!name.equals("")){
            data = search.searchPatientByName(name);
        } else if (!ic.equals("")){
            data = search.searchPatientByIC(ic);
        } else if (!id.equals("")){
            data = search.searchPatientByID(id);
        }
        
        if (data != null){
            DefaultTableModel model = (DefaultTableModel) jt_PatientInformation.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //Add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_PatientInformation.setValueAt(data.get(i).get(0), i, 0);
                jt_PatientInformation.setValueAt(data.get(i).get(1), i, 1);
                jt_PatientInformation.setValueAt(data.get(i).get(2), i, 2);
                jt_PatientInformation.setValueAt(data.get(i).get(3), i, 3);
                jt_PatientInformation.setValueAt(data.get(i).get(4), i, 4);
                jt_PatientInformation.setValueAt(data.get(i).get(5), i, 5);
                jt_PatientInformation.setValueAt(data.get(i).get(6), i, 6);
                jt_PatientInformation.setValueAt(data.get(i).get(7), i, 7);
            }
        }
    }//GEN-LAST:event_btn_SearchBillingActionPerformed

    private void jtf_SearchNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_SearchNameMousePressed
        // TODO add your handling code here:
        jtf_SearchIC.setText("");
        jtf_SearchID.setText("");
    }//GEN-LAST:event_jtf_SearchNameMousePressed

    private void jtf_SearchICMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_SearchICMousePressed
        // TODO add your handling code here:
        jtf_SearchName.setText("");
        jtf_SearchID.setText("");
    }//GEN-LAST:event_jtf_SearchICMousePressed

    private void jtf_SearchIDMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_SearchIDMousePressed
        // TODO add your handling code here:
        jtf_SearchIC.setText("");
        jtf_SearchName.setText("");
    }//GEN-LAST:event_jtf_SearchIDMousePressed

    private void btn_mb_SearchBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mb_SearchBillActionPerformed
        // TODO add your handling code here:
        
        Search search = new Search();
        ArrayList<ArrayList<String>> data = null;
        
        String name = jtf_mb_SearchName.getText();
        String ic = jtf_mb_SearchIC.getText();
        String id = jtf_mb_SearchID.getText();
        String status = "";
        
        if (jrb_Paid.isSelected()){
            status = "Paid";
        } else if (jrb_Unpaid.isSelected()){
            status = "Unpaid";
        }
        
        if (!name.equals("")){
            data = search.searchBillByName(name, status);
        } else if (!ic.equals("")){
            data = search.searchBillByIC(ic, status);
        } else if (!id.equals("")){
            data = search.searchBillByID(id, status);
        }
        
        if (data != null){
            DefaultTableModel model = (DefaultTableModel) jt_ListPatientBill.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_ListPatientBill.setValueAt(data.get(i).get(0), i, 0);
                jt_ListPatientBill.setValueAt(data.get(i).get(1), i, 1);
                jt_ListPatientBill.setValueAt(data.get(i).get(2), i, 2);
                jt_ListPatientBill.setValueAt(data.get(i).get(3), i, 3);
                jt_ListPatientBill.setValueAt(data.get(i).get(4), i, 4);
                jt_ListPatientBill.setValueAt(data.get(i).get(5), i, 5);
                jt_ListPatientBill.setValueAt(data.get(i).get(6), i, 6);
                jt_ListPatientBill.setValueAt(data.get(i).get(7), i, 7);
                jt_ListPatientBill.setValueAt(df.format(Double.parseDouble(data.get(i).get(8))), i, 8);
            }
        }
    }//GEN-LAST:event_btn_mb_SearchBillActionPerformed

    private void jtf_mb_SearchNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_mb_SearchNameMousePressed
        // TODO add your handling code here:
        jtf_mb_SearchIC.setText("");
        jtf_mb_SearchID.setText("");
    }//GEN-LAST:event_jtf_mb_SearchNameMousePressed

    private void jtf_mb_SearchICMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_mb_SearchICMousePressed
        // TODO add your handling code here:
        jtf_mb_SearchName.setText("");
        jtf_mb_SearchID.setText("");
    }//GEN-LAST:event_jtf_mb_SearchICMousePressed

    private void jtf_mb_SearchIDMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf_mb_SearchIDMousePressed
        // TODO add your handling code here:
        jtf_mb_SearchName.setText("");
        jtf_mb_SearchIC.setText("");
    }//GEN-LAST:event_jtf_mb_SearchIDMousePressed

    private void btn_BackupDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackupDataActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btn_BackupDataActionPerformed

    private void btn_StartProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StartProcessActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btn_StartProcessActionPerformed

    private void btn_RetoreDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RetoreDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_RetoreDataActionPerformed

    private void btn_YearlyStatementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_YearlyStatementActionPerformed
        // TODO add your handling code here:
        Report report = new Report();
        report.generateYearlyStatement();
    }//GEN-LAST:event_btn_YearlyStatementActionPerformed

    /**
     * Display manage miscellaneous items.
     */
    private void tableManageMiscellaneous() {
        try {
            String sql = "SELECT * FROM far_miscellaneous_item";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);
            DefaultTableModel model = (DefaultTableModel) jt_MM.getModel();

            //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});

                jt_MM.setValueAt(data.get(i).get(1), i, 0);
                jt_MM.setValueAt(data.get(i).get(2), i, 1);
                jt_MM.setValueAt(df.format(Double.parseDouble(data.get(i).get(3))), i, 2);
                jt_MM.setValueAt(df.format(Double.parseDouble(data.get(i).get(4))), i, 3);
            }
            
            generateMiscItemCode();
            
            tableMiscellaneousItemSorter();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    /**
     * Display table billing parameter
     */
    public void tableBillingParameter(){
        try{
            String sql = "SELECT * FROM far_billing_parameter ";
            ArrayList<ArrayList<String>> data = rc.getQuerySQL(host, portNo, sql);
            DefaultTableModel model = (DefaultTableModel) jt_BillingParameter.getModel();

             //remove all row
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //add row and show value
            for (int i = 0; i < data.size(); i++) {
                model.addRow(new Object[]{"", "", "", "", ""});
                
                jt_BillingParameter.setValueAt(data.get(i).get(0), i, 0);
                jt_BillingParameter.setValueAt(data.get(i).get(1), i, 1);
                jt_BillingParameter.setValueAt(data.get(i).get(2), i, 2);
                jt_BillingParameter.setValueAt(data.get(i).get(3), i, 3);
                jt_BillingParameter.setValueAt(data.get(i).get(5), i, 4);
            }
            
            generateParamCode();
            
        } catch (Exception e){
             JOptionPane.showMessageDialog(null, e);
        }
    }
    
     /**
     * Detect and sort table miscellaneous item  content based on the input
     */
    public void tableMiscellaneousItemSorter() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<TableModel>(jt_MM.getModel());
        jt_MM.setRowSorter(rowSorter);

        jtf_mm_SearchItem.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);

                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = jtf_mm_SearchItem.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }
    
    /**
     * Auto generate parameter code.
     */
    private void generateParamCode(){
        String code = "BP";
        for (int i = 0 ; i < 2 ; i++){
            code = code + "0";
        }
        DefaultTableModel model = (DefaultTableModel) jt_BillingParameter.getModel();
        code = code + (model.getRowCount()+1);
        jtf_mp_Code.setText(code);
    }
    
    /**
     * Auto generate parameter code.
     */
    private void generateMiscItemCode(){
        String code = "RG";
        for (int i = 0 ; i < 4 ; i++){
            code = code + "0";
        }
        DefaultTableModel model = (DefaultTableModel) jt_MM.getModel();
        code = code + (model.getRowCount()+1);
        jtf_mm_ItemCd.setText(code);
    }
    
    public static void main(String[] args) {
        new Billing("10.73.32.200", 1099).setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btn_AddItem;
    private javax.swing.JButton btn_Back;
    private javax.swing.JButton btn_BackupData;
    private javax.swing.JButton btn_DeleteItem;
    private javax.swing.JButton btn_GenerateBill;
    private javax.swing.JButton btn_Payment;
    private javax.swing.JButton btn_PrintReceipt;
    private javax.swing.JButton btn_RefreshMM;
    private javax.swing.JButton btn_RetoreData;
    private javax.swing.JButton btn_SearchBilling;
    private javax.swing.JButton btn_StartProcess;
    private javax.swing.JButton btn_YearlyStatement;
    private javax.swing.JButton btn_mb_SearchBill;
    private javax.swing.JButton btn_mm_Add;
    private javax.swing.JButton btn_mm_Cancel;
    private javax.swing.JButton btn_mm_Delete;
    private javax.swing.JButton btn_mm_Update;
    private javax.swing.JButton btn_mp_Add;
    private javax.swing.JButton btn_mp_Clear;
    private javax.swing.JButton btn_mp_Delete;
    private javax.swing.JButton btn_mp_Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel_Billing;
    private javax.swing.JPanel jPanel_ManageBill;
    private javax.swing.JPanel jPanel_ManageMiscellaneous;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JCheckBox jcb_Enable;
    private javax.swing.JRadioButton jrb_Paid;
    private javax.swing.JRadioButton jrb_Unpaid;
    private javax.swing.JTable jt_BillDescription;
    private javax.swing.JTable jt_BillingParameter;
    private javax.swing.JTable jt_ListItemPerPatient;
    private javax.swing.JTable jt_ListPatientBill;
    private javax.swing.JTable jt_MM;
    private javax.swing.JTable jt_PatientInformation;
    private javax.swing.JTextField jtf_SearchIC;
    private javax.swing.JTextField jtf_SearchID;
    private javax.swing.JTextField jtf_SearchName;
    private javax.swing.JTextField jtf_mb_SearchIC;
    private javax.swing.JTextField jtf_mb_SearchID;
    private javax.swing.JTextField jtf_mb_SearchName;
    private javax.swing.JTextField jtf_mm_BuyPrice;
    private javax.swing.JTextField jtf_mm_ItemCd;
    private javax.swing.JTextField jtf_mm_ItemDesc;
    private javax.swing.JTextField jtf_mm_SearchItem;
    private javax.swing.JTextField jtf_mm_SellPrice;
    private javax.swing.JTextField jtf_mp_Code;
    private javax.swing.JTextField jtf_mp_Name;
    private javax.swing.JTextField jtf_mp_Type;
    private javax.swing.JTextField jtf_mp_Value;
    private javax.swing.JTabbedPane tab;
    // End of variables declaration//GEN-END:variables

}
